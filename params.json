{
  "name": "Librdataframe",
  "tagline": "A library, containing consolidated collection of routines to support R-style Data Structures for C++",
  "body": "## libRDataFrame\r\nA library, containing the consolidated collection of routines to support R-style Data Structures for C++\r\n\r\n\r\n### Overview and Statment of purpose (goal development)\r\nsee [Project page](https://medmatix.github.io/libRDataFrame/)\r\n\r\nThis project has the goal of developing an R-like dataframe class and other data structures (like an R factor data type (called a category for C++) for similar applications for analysis of data written entirely in C++. \r\n\r\nThe necessary building blocks of this dataframe analog are a Variable composite data structure including vector class for the raw data, for the columns of the dataframe, and a vector class to contain the variable objects. Of note, R arrays are column major memory structures, so this is simulates such a structure to provide at least a virtual variable oriented structure.\r\n\r\nThe R dataframe is, a list derivative with vectors for the columns as elements of the list.As noted below, this is a bit untenable in C++. The base reference to the  elements (rows and columns) is the usual numeric endices. However, associative reference with variable (column) and observation (row) also a feature. This is accomplished with a vector< vector< Node> > > structure.\r\n\r\nBeing relatively new to C++, this is my first major project in C++. At this point, my breadth and depth of understanding of C++ is growing but is at times an impediment to finding the best way to do things. Each revision provides new experience. Suggestions and comments are welcome.\r\n\r\n###Contributors\r\n  - Author: David York (Medmatix)\r\n\r\n###Development Notes\r\n#### A Todo List\r\n1. Decide on the on going approachs to a mixed type list.\r\n2. A complete set of getters and setter as will as appropriate to_string methods for each datatype constructed. Include formatted display methods for each structure.\r\n    - Node class completed getters and setters\r\n    - Category class on going development, see individual project\r\n    - UtilCSV completed getters and setters\r\n    - RDataframe class getters and setters in process, basic ones are complete\r\n3. Develop a list of functions member and non-member, to include as dataframe manipulator and analysis  functions.\r\n4. Continued testing ( main() module) of functions and classes as developed.\r\n\r\n#### Design directions\r\nInitially a list of vectors was the basic plan in keeping with the R structure. However R lists and C++ STL lists are different enough as to handicape any attempt to mimic R structures in C++. Thus a move tp the data.frame in C++ being a vector of vectors. \r\n\r\nThe principal issue is the need to random access the variables (columns) in the data.frame is the C++ implementation. The C++ list is implemented as a sequentially accessed object to allow access for actions on the elements across the list. The random access of individual list members is not implemented in the list structure.\r\n\r\n###Unit Testing Notes\r\nExcluding the category data type class, all the relevant getters, setters and display functions are implemented and tested in the Unit Test main() module.\r\n\r\n\r\n###References and Acknowledgements\r\nSee related project, [UtilCSV](http://medmatix.github.io/UtilCSV)\r\n                     [RDataframe7](http://medmatix.github.io/RDataframe)\r\n\r\n###Contacts\r\nAuthor web page, http://crunches-data.appspot.com\r\nEmail, medmatix@gmail.com\r\n\r\nCopyright 2016 D.A.York\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}